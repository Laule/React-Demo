{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LYJ\\\\Desktop\\\\github\\\\React\\\\todolist\\\\src\\\\TodoItem.js\";\nimport React, { Component } from 'react'; // 属性接收的强校验\n\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends Component {\n  constructor(props) {\n    // 固定的写法\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  render() {\n    // 接收父组件传过来的值\n    // 加了括号可以换行写\n    const _this$props = this.props,\n          content = _this$props.content,\n          test = _this$props.test; // JSX -> 虚拟DOM (JS对象) -> 真实的DOM\n    // return React.createElement('div',{},'item') // JS 对象\n\n    return React.createElement(\"li\", {\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, test, \" - \", content);\n  }\n\n  handleClick() {\n    // 子组件调用父组件方法，来修改父组件的内容\n    // this.props.deleteItem(this.props.index);\n    const _this$props2 = this.props,\n          deleteItem = _this$props2.deleteItem,\n          index = _this$props2.index;\n    deleteItem(index);\n  } // 当一个组件从父组件接收了参数\n  // 只要父组件的render函数被重新执行了，子组件的这个生命周期函数就会被执行\n  // 如果这个组件第一次存在于父组件中，不会执行\n  // 如果这个组件之前已经存在于父组件中，才会执行\n\n\n  componentWillReceiveProps() {\n    console.log('child componentWillReceiveProps');\n  } // 当这个组件即将被从页面中剔除的时候，会被执行\n\n\n  componentWillUnmount() {\n    console.log('componentWillUnmount');\n  }\n\n} // 对 TodoItem 属性进行校验\n\n\nTodoItem.propTypes = {\n  // 要求父组件必须向子组件传值\n  test: PropTypes.string.isRequired,\n  content: PropTypes.string,\n  deleteItem: PropTypes.func,\n  index: PropTypes.number // 设置默认值\n\n};\nTodoItem.defaultProps = {\n  test: 'Say Hello'\n};\nexport default TodoItem;","map":{"version":3,"sources":["C:\\Users\\LYJ\\Desktop\\github\\React\\todolist\\src\\TodoItem.js"],"names":["React","Component","PropTypes","TodoItem","constructor","props","handleClick","bind","render","content","test","deleteItem","index","componentWillReceiveProps","console","log","componentWillUnmount","propTypes","string","isRequired","func","number","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B,C,CACA;;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAE7BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACA,UAAMA,KAAN;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL;AACA;AAFK,wBAGmB,KAAKH,KAHxB;AAAA,UAGEI,OAHF,eAGEA,OAHF;AAAA,UAGWC,IAHX,eAGWA,IAHX,EAIL;AACA;;AACA,WACI;AAAI,MAAA,OAAO,EAAE,KAAKJ,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKI,IADL,SACcD,OADd,CADJ;AAKH;;AAEDH,EAAAA,WAAW,GAAG;AACV;AACA;AAFU,yBAGkB,KAAKD,KAHvB;AAAA,UAGHM,UAHG,gBAGHA,UAHG;AAAA,UAGSC,KAHT,gBAGSA,KAHT;AAIVD,IAAAA,UAAU,CAACC,KAAD,CAAV;AACH,GA1B4B,CA2B7B;AACA;AACA;AACA;;;AACAC,EAAAA,yBAAyB,GACzB;AACIC,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACH,GAlC4B,CAoC7B;;;AACAC,EAAAA,oBAAoB,GACpB;AACIF,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH;;AAxC4B,C,CA4CjC;;;AACAZ,QAAQ,CAACc,SAAT,GAAqB;AACjB;AACAP,EAAAA,IAAI,EAAER,SAAS,CAACgB,MAAV,CAAiBC,UAFN;AAGjBV,EAAAA,OAAO,EAAEP,SAAS,CAACgB,MAHF;AAIjBP,EAAAA,UAAU,EAAET,SAAS,CAACkB,IAJL;AAKjBR,EAAAA,KAAK,EAAEV,SAAS,CAACmB,MALA,CAQrB;;AARqB,CAArB;AASAlB,QAAQ,CAACmB,YAAT,GAAwB;AACpBZ,EAAAA,IAAI,EAAC;AADe,CAAxB;AAIA,eAAeP,QAAf","sourcesContent":["import React, {Component} from 'react';\r\n// 属性接收的强校验\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TodoItem extends Component {\r\n\r\n    constructor(props) {\r\n        // 固定的写法\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    render() {\r\n        // 接收父组件传过来的值\r\n        // 加了括号可以换行写\r\n        const {content, test} = this.props;\r\n        // JSX -> 虚拟DOM (JS对象) -> 真实的DOM\r\n        // return React.createElement('div',{},'item') // JS 对象\r\n        return (\r\n            <li onClick={this.handleClick}>\r\n                {test} - {content}\r\n            </li>\r\n        )\r\n    }\r\n\r\n    handleClick() {\r\n        // 子组件调用父组件方法，来修改父组件的内容\r\n        // this.props.deleteItem(this.props.index);\r\n        const {deleteItem, index} = this.props;\r\n        deleteItem(index);\r\n    }\r\n    // 当一个组件从父组件接收了参数\r\n    // 只要父组件的render函数被重新执行了，子组件的这个生命周期函数就会被执行\r\n    // 如果这个组件第一次存在于父组件中，不会执行\r\n    // 如果这个组件之前已经存在于父组件中，才会执行\r\n    componentWillReceiveProps()\r\n    {\r\n        console.log('child componentWillReceiveProps');\r\n    }\r\n\r\n    // 当这个组件即将被从页面中剔除的时候，会被执行\r\n    componentWillUnmount()\r\n    {\r\n        console.log('componentWillUnmount');\r\n    }\r\n\r\n}\r\n\r\n// 对 TodoItem 属性进行校验\r\nTodoItem.propTypes = {\r\n    // 要求父组件必须向子组件传值\r\n    test: PropTypes.string.isRequired,\r\n    content: PropTypes.string,\r\n    deleteItem: PropTypes.func,\r\n    index: PropTypes.number\r\n}\r\n\r\n// 设置默认值\r\nTodoItem.defaultProps = {\r\n    test:'Say Hello'\r\n}\r\n\r\nexport default TodoItem;"]},"metadata":{},"sourceType":"module"}