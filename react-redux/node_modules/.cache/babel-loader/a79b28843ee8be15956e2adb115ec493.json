{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LYJ\\\\Desktop\\\\github\\\\React\\\\todolist\\\\src\\\\TodoList.js\";\nimport React, { Component, Fragment } from 'react';\nimport TodoItem from './TodoItem';\nimport './style.css';\nimport Test from './Test';\nimport axios from 'axios'; // JSX 需要一个最外层的标签包裹住\n// 如果不想用标签包裹，可以使用占位符（Fragment）标签\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props); // 当组件的state或者props发生改变的时候，render函数就会重新执行\n\n    this.state = {\n      inputValue: '',\n      list: []\n    }; // 初始化this指向问题\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleBtnClick = this.handleBtnClick.bind(this);\n    this.handleItemDelete = this.handleItemDelete.bind(this);\n  } // 在组件即将被挂载到页面的时刻自动执行\n\n\n  componentWillMount() {\n    console.log('componentWillMount');\n  } // 在组件被挂载之后执行\n\n\n  componentDidMount() {\n    axios.get('http://www.hemaisi.com/service/msg/get?page=1&limit=30').then(res => {\n      console.log(res.data[0].phone); // this.setState(() => ({\n      //     list:[...res.data.phone]\n      // }))\n    }).catch(() => {\n      alert('error');\n    });\n    console.log('componentDidMount');\n  } // 组件被更新之前，会被自动执行\n\n\n  shouldComponentUpdate() {\n    console.log('shouldComponentUpdate'); // [true，false]\n\n    return true;\n  } // 组件被更新之前，它会自动执行，但是它在shouldComponentUpdate之后被执行，\n  // 如果shouldComponentUpdate返回true,它才会执行，返回false就不执行\n\n\n  componentWillUpdate() {\n    console.log('componentWillUpdate');\n  } // 组件更新完后，它会被自动执行\n\n\n  componentDidUpdate() {\n    console.log('componentDidUpdate');\n  } // 没有Props 情况下，是不会自动执行的\n  // componentWillReceiveProps()\n  // {\n  //     console.log('componentWillReceiveProps');\n  // }\n\n\n  render() {\n    console.log('render');\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"insertAfter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"\\u8F93\\u5165\\u5185\\u5BB9\"), React.createElement(\"input\", {\n      id: \"insertAfter\",\n      className: \"input\",\n      type: \"text\",\n      value: this.state.inputValue,\n      onChange: this.handleInputChange,\n      ref: input => {\n        this.input = input;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.handleBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"\\u63D0\\u4EA4\")), React.createElement(\"ul\", {\n      ref: ul => {\n        this.ul = ul;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.getTodoItem()));\n  }\n\n  handleInputChange(e) {\n    console.log(e.target); // console.log(this.input); ref\n    // console.log(this); // this 指向问题\n    // React修改数据内容必须使用setState属性\n    // this.setState({\n    //     inputValue: e.target.value\n    // });\n    // 异步的setState，需要先保存一下数据\n\n    const value = e.target.value; // const value =  this.input.value; ref\n\n    this.setState(() => ({\n      inputValue: value\n    }));\n  }\n\n  handleBtnClick(e) {\n    // prevState 修改数据之前的数据\n    // 异步函数，不会立即执行\n    this.setState(prevState => ({\n      list: [...prevState.list, prevState.inputValue],\n      inputValue: ''\n    }), () => {\n      // 回调函数，setState执行完再执行\n      console.log(this.ul.querySelectorAll('li').length);\n    });\n  }\n\n  getTodoItem() {\n    return this.state.list.map((item, index) => {\n      return React.createElement(\"div\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(TodoItem, {\n        content: item,\n        index: index,\n        deleteItem: this.handleItemDelete // this指向要做改变\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }));\n    });\n  }\n\n  handleItemDelete(index) {\n    // 修改数据必须使用 setState\n    // immutable\n    // state 不允许我们做任何修改\n    // this.setState({\n    //     list: list\n    // })\n    this.setState(prevState => {\n      // 拷贝\n      const list = [...prevState.list];\n      list.splice(index, 1);\n      return {\n        list\n      };\n    });\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["C:\\Users\\LYJ\\Desktop\\github\\React\\todolist\\src\\TodoList.js"],"names":["React","Component","Fragment","TodoItem","Test","axios","TodoList","constructor","props","state","inputValue","list","handleInputChange","bind","handleBtnClick","handleItemDelete","componentWillMount","console","log","componentDidMount","get","then","res","data","phone","catch","alert","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","render","input","ul","getTodoItem","e","target","value","setState","prevState","querySelectorAll","length","map","item","index","splice"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,MAAMC,QAAN,SAAuBL,SAAvB,CAAiC;AAE7BM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE,EADH;AAETC,MAAAA,IAAI,EAAE;AAFG,KAAb,CAHe,CAOf;;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKE,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBF,IAAtB,CAA2B,IAA3B,CAAxB;AACH,GAb4B,CAe7B;;;AACAG,EAAAA,kBAAkB,GAAG;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH,GAlB4B,CAoB7B;;;AACAC,EAAAA,iBAAiB,GAAG;AAChBd,IAAAA,KAAK,CAACe,GAAN,CAAU,wDAAV,EAAoEC,IAApE,CAA0EC,GAAD,IAAS;AAC9EL,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYC,KAAxB,EAD8E,CAE9E;AACA;AACA;AACH,KALD,EAKGC,KALH,CAKS,MAAM;AACXC,MAAAA,KAAK,CAAC,OAAD,CAAL;AACH,KAPD;AASAT,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,GAhC4B,CAkC7B;;;AACAS,EAAAA,qBAAqB,GAAG;AACpBV,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EADoB,CAEpB;;AACA,WAAO,IAAP;AACH,GAvC4B,CAyC7B;AACA;;;AACAU,EAAAA,mBAAmB,GAAG;AAClBX,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH,GA7C4B,CA+C7B;;;AACAW,EAAAA,kBAAkB,GAAG;AACjBZ,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH,GAlD4B,CAoD7B;AACA;AACA;AACA;AACA;;;AAEAY,EAAAA,MAAM,GAAG;AACLb,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,WACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOI;AAAO,MAAA,OAAO,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAPJ,EAQI;AAAO,MAAA,EAAE,EAAC,aAAV;AAAwB,MAAA,SAAS,EAAC,OAAlC;AAA0C,MAAA,IAAI,EAAC,MAA/C;AAAsD,MAAA,KAAK,EAAE,KAAKT,KAAL,CAAWC,UAAxE;AACO,MAAA,QAAQ,EAAE,KAAKE,iBADtB;AAEO,MAAA,GAAG,EAAGmB,KAAD,IAAW;AACZ,aAAKA,KAAL,GAAaA,KAAb;AACH,OAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,EAcI;AAAQ,MAAA,OAAO,EAAE,KAAKjB,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAdJ,CADJ,EAmBI;AAAI,MAAA,GAAG,EAAGkB,EAAD,IAAQ;AACb,aAAKA,EAAL,GAAUA,EAAV;AACH,OAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIQ,KAAKC,WAAL,EAJR,CAnBJ,CADJ;AA8BH;;AAEDrB,EAAAA,iBAAiB,CAACsB,CAAD,EAAI;AACjBjB,IAAAA,OAAO,CAACC,GAAR,CAAYgB,CAAC,CAACC,MAAd,EADiB,CAEjB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMC,KAAK,GAAGF,CAAC,CAACC,MAAF,CAASC,KAAvB,CATiB,CAUjB;;AACA,SAAKC,QAAL,CAAc,OAAO;AACjB3B,MAAAA,UAAU,EAAE0B;AADK,KAAP,CAAd;AAGH;;AAEDtB,EAAAA,cAAc,CAACoB,CAAD,EAAI;AACd;AACA;AACA,SAAKG,QAAL,CAAeC,SAAD,KAAgB;AAC1B3B,MAAAA,IAAI,EAAE,CAAC,GAAG2B,SAAS,CAAC3B,IAAd,EAAoB2B,SAAS,CAAC5B,UAA9B,CADoB;AAE1BA,MAAAA,UAAU,EAAE;AAFc,KAAhB,CAAd,EAGI,MAAM;AACN;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKc,EAAL,CAAQO,gBAAR,CAAyB,IAAzB,EAA+BC,MAA3C;AACH,KAND;AASH;;AAEDP,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKxB,KAAL,CAAWE,IAAX,CAAgB8B,GAAhB,CAAoB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACxC,aACI;AAAK,QAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI,oBAAC,QAAD;AACI,QAAA,OAAO,EAAED,IADb;AAEI,QAAA,KAAK,EAAEC,KAFX;AAGI,QAAA,UAAU,EAAE,KAAK5B,gBAHrB,CAGuC;AAHvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CADJ;AAmBH,KApBM,CAAP;AAsBH;;AAEDA,EAAAA,gBAAgB,CAAC4B,KAAD,EAAQ;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAKN,QAAL,CAAeC,SAAD,IAAe;AACzB;AACA,YAAM3B,IAAI,GAAG,CAAC,GAAG2B,SAAS,CAAC3B,IAAd,CAAb;AACAA,MAAAA,IAAI,CAACiC,MAAL,CAAYD,KAAZ,EAAmB,CAAnB;AACA,aAAO;AAAChC,QAAAA;AAAD,OAAP;AACH,KALD;AAMH;;AAjK4B;;AAoKjC,eAAeL,QAAf","sourcesContent":["import React, {Component, Fragment} from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport './style.css';\r\nimport Test from './Test';\r\nimport axios from 'axios';\r\n// JSX 需要一个最外层的标签包裹住\r\n// 如果不想用标签包裹，可以使用占位符（Fragment）标签\r\nclass TodoList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // 当组件的state或者props发生改变的时候，render函数就会重新执行\r\n        this.state = {\r\n            inputValue: '',\r\n            list: []\r\n        };\r\n        // 初始化this指向问题\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleBtnClick = this.handleBtnClick.bind(this);\r\n        this.handleItemDelete = this.handleItemDelete.bind(this);\r\n    }\r\n\r\n    // 在组件即将被挂载到页面的时刻自动执行\r\n    componentWillMount() {\r\n        console.log('componentWillMount');\r\n    }\r\n\r\n    // 在组件被挂载之后执行\r\n    componentDidMount() {\r\n        axios.get('http://www.hemaisi.com/service/msg/get?page=1&limit=30').then((res) => {\r\n            console.log(res.data[0].phone);\r\n            // this.setState(() => ({\r\n            //     list:[...res.data.phone]\r\n            // }))\r\n        }).catch(() => {\r\n            alert('error')\r\n        });\r\n\r\n        console.log('componentDidMount');\r\n    }\r\n\r\n    // 组件被更新之前，会被自动执行\r\n    shouldComponentUpdate() {\r\n        console.log('shouldComponentUpdate');\r\n        // [true，false]\r\n        return true;\r\n    }\r\n\r\n    // 组件被更新之前，它会自动执行，但是它在shouldComponentUpdate之后被执行，\r\n    // 如果shouldComponentUpdate返回true,它才会执行，返回false就不执行\r\n    componentWillUpdate() {\r\n        console.log('componentWillUpdate');\r\n    }\r\n\r\n    // 组件更新完后，它会被自动执行\r\n    componentDidUpdate() {\r\n        console.log('componentDidUpdate');\r\n    }\r\n\r\n    // 没有Props 情况下，是不会自动执行的\r\n    // componentWillReceiveProps()\r\n    // {\r\n    //     console.log('componentWillReceiveProps');\r\n    // }\r\n\r\n    render() {\r\n        console.log('render');\r\n        return (\r\n            <Fragment>\r\n                <div>\r\n                    {/*注释只会在开发上显示*/}\r\n                    {\r\n                        // 这是单行注释\r\n                    }\r\n                    {/* 借助ES6的bind函数 来改变this指向 */}\r\n                    {/*用className代替class关键词*/}\r\n                    <label htmlFor=\"insertAfter\">输入内容</label>\r\n                    <input id=\"insertAfter\" className=\"input\" type=\"text\" value={this.state.inputValue}\r\n                           onChange={this.handleInputChange}\r\n                           ref={(input) => {\r\n                               this.input = input\r\n                           }}\r\n                    />\r\n                    <button onClick={this.handleBtnClick}>\r\n                        提交\r\n                    </button>\r\n                </div>\r\n                <ul ref={(ul) => {\r\n                    this.ul = ul\r\n                }}>\r\n                    {\r\n                        this.getTodoItem()\r\n                    }\r\n                </ul>\r\n                {/*<Test content={this.state.inputValue}/>*/}\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    handleInputChange(e) {\r\n        console.log(e.target);\r\n        // console.log(this.input); ref\r\n        // console.log(this); // this 指向问题\r\n        // React修改数据内容必须使用setState属性\r\n        // this.setState({\r\n        //     inputValue: e.target.value\r\n        // });\r\n        // 异步的setState，需要先保存一下数据\r\n        const value = e.target.value;\r\n        // const value =  this.input.value; ref\r\n        this.setState(() => ({\r\n            inputValue: value\r\n        }))\r\n    }\r\n\r\n    handleBtnClick(e) {\r\n        // prevState 修改数据之前的数据\r\n        // 异步函数，不会立即执行\r\n        this.setState((prevState) => ({\r\n            list: [...prevState.list, prevState.inputValue],\r\n            inputValue: ''\r\n        }), () => {\r\n            // 回调函数，setState执行完再执行\r\n            console.log(this.ul.querySelectorAll('li').length);\r\n        })\r\n\r\n\r\n    }\r\n\r\n    getTodoItem() {\r\n        return this.state.list.map((item, index) => {\r\n            return (\r\n                <div key={index}>\r\n                    {/* 当进行循环的时候，需要给每个列key标签 */}\r\n                    {/* dangerouslySetInnerHTML 不转义html内容 容易被XSS攻击 */}\r\n                    {/*父组件向子组件传值*/}\r\n                    {/*既可以传递属性，又可以传递方法*/}\r\n                    <TodoItem\r\n                        content={item}\r\n                        index={index}\r\n                        deleteItem={this.handleItemDelete} // this指向要做改变\r\n                    />\r\n                    {/*面试题：React 父子组件怎么进行通信？ 父组件向子组件传递一个方法，子组件调用父组件传递过来的方法*/}\r\n                    {/*父组件可以向子组件传值，子组件只能使用值，不能去修改值，单向数据流*/}\r\n                    {/*\r\n                            <li key={index} onClick={this.handleItemDelete.bind(this, index)}\r\n                                       dangerouslySetInnerHTML={{__html:item}}\r\n                            ></li>*/}\r\n                </div>\r\n            )\r\n        })\r\n\r\n    }\r\n\r\n    handleItemDelete(index) {\r\n\r\n        // 修改数据必须使用 setState\r\n        // immutable\r\n        // state 不允许我们做任何修改\r\n        // this.setState({\r\n        //     list: list\r\n        // })\r\n        this.setState((prevState) => {\r\n            // 拷贝\r\n            const list = [...prevState.list];\r\n            list.splice(index, 1);\r\n            return {list}\r\n        });\r\n    }\r\n}\r\n\r\nexport default TodoList;\r\n"]},"metadata":{},"sourceType":"module"}