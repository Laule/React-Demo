{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LYJ\\\\Desktop\\\\github\\\\React\\\\todolist\\\\src\\\\TodoList.js\";\nimport React, { Component, Fragment } from 'react';\nimport './style.css';\nimport TodoItem from './TodoItem'; // JSX 需要一个最外层的标签包裹住\n// 如果不想用标签包裹，可以使用占位符（Fragment）标签\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: '',\n      list: ['学习英语', '学习React']\n    };\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"insertAfter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"\\u8F93\\u5165\\u5185\\u5BB9\"), React.createElement(\"input\", {\n      id: \"insertAfter\",\n      className: \"input\",\n      type: \"text\",\n      value: this.state.inputValue,\n      onChange: this.handleInputChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.handleBtnClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"\\u63D0\\u4EA4\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, this.state.list.map((item, index) => {\n      {\n        /* 当进行循环的时候，需要给每个列key标签 */\n      }\n      {\n        /*dangerouslySetInnerHTML 不转义html内容 容易被XSS攻击*/\n      }\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(TodoItem, {\n        content: item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }));\n    })));\n  }\n\n  handleInputChange(e) {\n    // console.log(this); // this 指向问题\n    // React修改数据内容必须使用setState属性\n    this.setState({\n      inputValue: e.target.value\n    });\n  }\n\n  handleBtnClick(e) {\n    this.setState({\n      list: [...this.state.list, this.state.inputValue],\n      inputValue: ''\n    });\n  }\n\n  handleItemDelete(index) {\n    // 拷贝\n    const list = [...this.state.list];\n    list.splice(index, 1); // 修改数据必须使用 setState\n    // immutable\n    // state 不允许我们做任何修改\n\n    this.setState({\n      list: list\n    });\n    console.log(index);\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["C:\\Users\\LYJ\\Desktop\\github\\React\\todolist\\src\\TodoList.js"],"names":["React","Component","Fragment","TodoItem","TodoList","constructor","props","state","inputValue","list","render","handleInputChange","bind","handleBtnClick","map","item","index","e","setState","target","value","handleItemDelete","splice","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAO,aAAP;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAEA;AACA;;AACA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAE7BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE,EADH;AAETC,MAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,SAAT;AAFG,KAAb;AAIH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOI;AAAO,MAAA,OAAO,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAPJ,EAQI;AAAO,MAAA,EAAE,EAAC,aAAV;AAAwB,MAAA,SAAS,EAAC,OAAlC;AAA0C,MAAA,IAAI,EAAC,MAA/C;AAAsD,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,UAAxE;AACO,MAAA,QAAQ,EAAE,KAAKG,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,EAUI;AAAQ,MAAA,OAAO,EAAE,KAAKC,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAVJ,EAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ,KAAKL,KAAL,CAAWE,IAAX,CAAgBK,GAAhB,CAAoB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACjC;AAAC;AACA;AACD;AAAC;AACA;AACD,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,QAAD;AAAU,QAAA,OAAO,EAAED,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ;AAUH,KAfD,CAFR,CAbJ,CADJ;AAoCH;;AAEDJ,EAAAA,iBAAiB,CAACM,CAAD,EAAI;AACjB;AACA;AACA,SAAKC,QAAL,CAAc;AACVV,MAAAA,UAAU,EAAES,CAAC,CAACE,MAAF,CAASC;AADX,KAAd;AAGH;;AAEDP,EAAAA,cAAc,CAACI,CAAD,EAAI;AACd,SAAKC,QAAL,CAAc;AACVT,MAAAA,IAAI,EAAE,CAAC,GAAG,KAAKF,KAAL,CAAWE,IAAf,EAAqB,KAAKF,KAAL,CAAWC,UAAhC,CADI;AAEVA,MAAAA,UAAU,EAAE;AAFF,KAAd;AAIH;;AAEDa,EAAAA,gBAAgB,CAACL,KAAD,EAAQ;AACpB;AACA,UAAMP,IAAI,GAAG,CAAC,GAAG,KAAKF,KAAL,CAAWE,IAAf,CAAb;AACAA,IAAAA,IAAI,CAACa,MAAL,CAAYN,KAAZ,EAAmB,CAAnB,EAHoB,CAIpB;AACA;AACA;;AACA,SAAKE,QAAL,CAAc;AACVT,MAAAA,IAAI,EAAEA;AADI,KAAd;AAGAc,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AAEH;;AA5E4B;;AA+EjC,eAAeZ,QAAf","sourcesContent":["import React, {Component, Fragment} from 'react';\r\nimport './style.css';\r\nimport TodoItem from './TodoItem';\r\n\r\n// JSX 需要一个最外层的标签包裹住\r\n// 如果不想用标签包裹，可以使用占位符（Fragment）标签\r\nclass TodoList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputValue: '',\r\n            list: ['学习英语', '学习React']\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                {/*注释只会在开发上显示*/}\r\n                {\r\n                    // 这是单行注释\r\n                }\r\n                {/* 借助ES6的bind函数 来改变this指向 */}\r\n                {/*用className代替class关键词*/}\r\n                <label htmlFor=\"insertAfter\">输入内容</label>\r\n                <input id=\"insertAfter\" className=\"input\" type=\"text\" value={this.state.inputValue}\r\n                       onChange={this.handleInputChange.bind(this)}/>\r\n                <button onClick={this.handleBtnClick.bind(this)}>\r\n                    提交\r\n                </button>\r\n                <ul>\r\n                    {\r\n                        this.state.list.map((item, index) => {\r\n                            {/* 当进行循环的时候，需要给每个列key标签 */\r\n                            }\r\n                            {/*dangerouslySetInnerHTML 不转义html内容 容易被XSS攻击*/\r\n                            }\r\n                            return (\r\n                                <div>\r\n                                    {/*父组件向子组件传值*/}\r\n                                    <TodoItem content={item}/>\r\n                                    {/*\r\n                            <li key={index} onClick={this.handleItemDelete.bind(this, index)}\r\n                                       dangerouslySetInnerHTML={{__html:item}}\r\n                            ></li>*/}\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    handleInputChange(e) {\r\n        // console.log(this); // this 指向问题\r\n        // React修改数据内容必须使用setState属性\r\n        this.setState({\r\n            inputValue: e.target.value\r\n        });\r\n    }\r\n\r\n    handleBtnClick(e) {\r\n        this.setState({\r\n            list: [...this.state.list, this.state.inputValue],\r\n            inputValue: ''\r\n        });\r\n    }\r\n\r\n    handleItemDelete(index) {\r\n        // 拷贝\r\n        const list = [...this.state.list];\r\n        list.splice(index, 1);\r\n        // 修改数据必须使用 setState\r\n        // immutable\r\n        // state 不允许我们做任何修改\r\n        this.setState({\r\n            list: list\r\n        })\r\n        console.log(index);\r\n\r\n    }\r\n}\r\n\r\nexport default TodoList;\r\n"]},"metadata":{},"sourceType":"module"}